- name: Update machine
  hosts: bot
  become: yes
  tasks:
    - name: Update using APT
      apt:
        update_cache: yes
        upgrade: dist
    - name: Install using APT
      apt:
        name:
          - git
          - python3
          - python3-all
          - python3-dev
          - python3-pip
          - python3-psycopg2

- name: Settings db server
  hosts: db, db_repl
  become: yes
  tasks:
    - name: Update using APT
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install using APT
      apt:
        name:
          - python3
          - python3-all
          - python3-dev
          - python3-pip
          - postgresql-15
          - postgresql-contrib
          - postgresql-common
        state: present

    - name: Check PosSQL version
      command: psql --version
      register: psql_version
      ignore_errors: true

- name: confuguration Master Node
  hosts: db
  become: yes
  tasks:
    - name: Install psycopg2
      apt:
        name: python3-psycopg2

    - name: Setup archive directory
      file:
        path: /oracle/pg_data/archive/
        state: directory
        owner: postgres
        group: postgres
        mode: "0700"

    - name: Setup pg_hba.conf
      blockinfile:
        create: true
        path: /etc/postgresql/15/main/pg_hba.conf
        block: |
          local all {{ hostvars[inventory_hostname]['DB_USER'] }} peer
          host all all "{{ hostvars[inventory_hostname]['DB_HOST'] }}"/32 trust
          host replication {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}/24 trust
          host all all {{ RM_HOST }}/32 trust

    - name: Setup postgresql.conf
      blockinfile:
        create: true
        path: /etc/postgresql/15/main/postgresql.conf
        block: |
          listen_addresses = '*'
          port = 5432
          log_destination = 'stderr'
          logging_collector = on
          log_directory = '/var/log/postgresql/'
          log_filename = 'postgresql.log'
          log_file_mode = 0644
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          log_replication_commands = on

    - name: Restart PosSQL
      service:
        name: postgresql
        state: restarted

    - name: Create master database
      community.general.postgresql_db:
        name: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
      become: yes
      become_user: postgres

    - name: Create Emails table
      command: psql -d {{ hostvars[inventory_hostname]['DB_DATABASE'] }} -c "CREATE TABLE emails (id serial PRIMARY KEY, email text);"
      become_user: postgres
      ignore_errors: true

    - name: Create Phone Numbers table
      command: psql -d {{ hostvars[inventory_hostname]['DB_DATABASE'] }} -c "CREATE TABLE phone_numbers (id serial PRIMARY KEY, phone_number text);"
      become_user: postgres
      ignore_errors: true

    - name: Create master user
      command: psql -c "CREATE USER {{ hostvars[inventory_hostname]['DB_USER'] }} SUPERUSER LOGIN PASSWORD '{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}';"
      become_user: postgres
      ignore_errors: true

    - name: Create replication user
      command: psql -c "CREATE USER {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} REPLICATION LOGIN PASSWORD '{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}';"
      become_user: postgres
      ignore_errors: true

- name: configuration db_repl (slave)
  hosts: db_repl
  become: yes
  tasks:
    - name: Check status PosSQL
      ansible.builtin.command:
        cmd: "pg_ctlcluster 15 main status"
      register: postgres_status
      ignore_errors: true
      become: yes
      become_user: root

    - name: Initialize PosSQL
      ansible.builtin.command:
        cmd: "pg_createcluster 15 main"
      when: postgres_status.stdout.find('specified cluster \'15 main\' does not exist') != -1
      become: yes
      become_user: root

    - name: Setup postgresql.conf
      blockinfile:
        create: true
        path: "/etc/postgresql/15/main/postgresql.conf"
        block: |
          listen_addresses = 'localhost, {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}'
          port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}

    - name: Stop PosSQL
      service:
        name: postgresql
        state: stopped

    - name: Remove directoryfor  backup
      command: rm -rf /var/lib/postgresql/15/main/*
      become_user: root

    - name: Total clean directory
      command: find /var/lib/postgresql/15/main/ -mindepth 1 -delete
      become: true

    - name: Execute pg_basebackup
      command: pg_basebackup -R -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -D /var/lib/postgresql/15/main -P
      become_user: postgres
      environment:
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: set permissions for the repl directory
      file:
        path: /var/lib/postgresql/15/main/
        owner: postgres
        group: postgres
        recurse: yes
      become: true

    - name: change owner
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: true

    - name: start PosSQL
      service:
        name: postgresql
        state: started

      environment:
        DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_REPL_HOST: "{{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}"
        DB_REPL_PORT: "{{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}"
        DB_REPL_USER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        DB_REPL_PASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

- name: configuration bot
  hosts: bot, db
  become: yes
  tasks:
    - name: Install Python packages
      pip:
        name:
          - python-telegram-bot==13.7
          - psycopg2-binary
          - python-dotenv
          - paramiko
          - requests
          - urllib3==1.26.15
        break_system_packages: true

    - name: Create working directory
      file:
        path: /etc/bot
        owner: ansible
        group: ansible
        state: directory
        mode: "0777"

    - name: get a git repository
      git:
        repo: https://github.com/Mzn2YVt8xq/AAI-PT-DEVOPS.git
        dest: /etc/bot
        version: devops_bot

    - name: Run Bot
      command: python3 /etc/bot/AAI-PT-DEVOPS/bot/bot.py
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        DB_REPL_USER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        DB_REPL_HOST: "{{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}"
        DB_REPL_PORT: "{{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}"
